open OUnit2

let suite =
  (* These parameters were generated using openssl. *)
  let e = Z.of_string_base 16 "010001" in
  let n =
    Z.of_string_base 16
      "A8CA9E1529C91688FC0DC99FAA59D32ABEC31135E6A872F0AB541078B73E881582A658AFE4E5650D91FD9A354832EB1904617E7B26B63571FA8DA2E3743DB09A1DD328274D7C9360BEAE8212801F7BBE00F1AA6C9ACEDAF395681F0A983996E806E991204394DBA628A34E47C81075846F01780B5CB39848B20DA2222D2A9F3D"
  in
  let d =
    Z.of_string_base 16
      "73B27EED4EB9118350123B54003695F244D3FCE60F770362486DD4E489E688ED05A2F4438D08585E16E5D860115F259AFE4FBD9CB88A48D419C42014FCC69457D24BF3A46FEA7499E32822E4DBF5AC56A25666B4829D50BAAA8B9A94442F2DD5CE3800C60AA4E9F32A11FB517546DB3B450348A51F8D69F097DDB62DA5877B01"
  in
  let p =
    Z.of_string_base 16
      "D838C2E801F139175045D59478DA2E75CD98EBAF97D1E72EE456C239BDE57E50DD2D289574D9C94B22ACFC5B2A6D7BEC61D949318C11FFB6D4ADD7A38D41099D"
  in
  let q =
    Z.of_string_base 16
      "C7D81161C95B4C38679DA634E2B452D4B49C90DBA9DC41A5D4CF1744D1828D6304DDB4D0732568450C799C97BC2561F5DFDF14C848D0AE9CD1A20B6B2BB54A21"
  in
  let private_encoded =
    String.concat ""
      [ "\x00\x00\x00\x81"
      ; "\x00\x73\xB2\x7E\xED\x4E\xB9\x11\x83\x50\x12\x3B\x54\x00\x36\x95\xF2\x44\xD3\xFC\xE6\x0F\x77\x03\x62\x48\x6D\xD4\xE4\x89\xE6\x88\xED\x05\xA2\xF4\x43\x8D\x08\x58\x5E\x16\xE5\xD8\x60\x11\x5F\x25\x9A\xFE\x4F\xBD\x9C\xB8\x8A\x48\xD4\x19\xC4\x20\x14\xFC\xC6\x94\x57\xD2\x4B\xF3\xA4\x6F\xEA\x74\x99\xE3\x28\x22\xE4\xDB\xF5\xAC\x56\xA2\x56\x66\xB4\x82\x9D\x50\xBA\xAA\x8B\x9A\x94\x44\x2F\x2D\xD5\xCE\x38\x00\xC6\x0A\xA4\xE9\xF3\x2A\x11\xFB\x51\x75\x46\xDB\x3B\x45\x03\x48\xA5\x1F\x8D\x69\xF0\x97\xDD\xB6\x2D\xA5\x87\x7B\x01"
      ; "\x01\x00\x01"
      ; "\x00\xD8\x38\xC2\xE8\x01\xF1\x39\x17\x50\x45\xD5\x94\x78\xDA\x2E\x75\xCD\x98\xEB\xAF\x97\xD1\xE7\x2E\xE4\x56\xC2\x39\xBD\xE5\x7E\x50\xDD\x2D\x28\x95\x74\xD9\xC9\x4B\x22\xAC\xFC\x5B\x2A\x6D\x7B\xEC\x61\xD9\x49\x31\x8C\x11\xFF\xB6\xD4\xAD\xD7\xA3\x8D\x41\x09\x9D"
      ; "\x00\xC7\xD8\x11\x61\xC9\x5B\x4C\x38\x67\x9D\xA6\x34\xE2\xB4\x52\xD4\xB4\x9C\x90\xDB\xA9\xDC\x41\xA5\xD4\xCF\x17\x44\xD1\x82\x8D\x63\x04\xDD\xB4\xD0\x73\x25\x68\x45\x0C\x79\x9C\x97\xBC\x25\x61\xF5\xDF\xDF\x14\xC8\x48\xD0\xAE\x9C\xD1\xA2\x0B\x6B\x2B\xB5\x4A\x21"
      ]
  in
  let public_encoded =
    "\xA8\xCA\x9E\x15\x29\xC9\x16\x88\xFC\x0D\xC9\x9F\xAA\x59\xD3\x2A\xBE\xC3\x11\x35\xE6\xA8\x72\xF0\xAB\x54\x10\x78\xB7\x3E\x88\x15\x82\xA6\x58\xAF\xE4\xE5\x65\x0D\x91\xFD\x9A\x35\x48\x32\xEB\x19\x04\x61\x7E\x7B\x26\xB6\x35\x71\xFA\x8D\xA2\xE3\x74\x3D\xB0\x9A\x1D\xD3\x28\x27\x4D\x7C\x93\x60\xBE\xAE\x82\x12\x80\x1F\x7B\xBE\x00\xF1\xAA\x6C\x9A\xCE\xDA\xF3\x95\x68\x1F\x0A\x98\x39\x96\xE8\x06\xE9\x91\x20\x43\x94\xDB\xA6\x28\xA3\x4E\x47\xC8\x10\x75\x84\x6F\x01\x78\x0B\x5C\xB3\x98\x48\xB2\x0D\xA2\x22\x2D\x2A\x9F\x3D"
    ^ "\x01\x00\x01"
  in
  let printer = Z.to_string in
  let test_private ctxt =
    let open Key_parsers.Ltpa.Rsa.Private in
    let k = decode (Cstruct.of_string private_encoded) in
    Test_helpers.assert_ok k @@ fun k ->
    assert_equal ~ctxt ~printer ~msg:"e" e k.e;
    assert_equal ~ctxt ~printer ~msg:"d" d k.d;
    assert_equal ~ctxt ~printer ~msg:"p" p k.p;
    assert_equal ~ctxt ~printer ~msg:"q" q k.q
  in
  let test_public ctxt =
    let open Key_parsers.Ltpa.Rsa.Public in
    let k = decode (Cstruct.of_string public_encoded) in
    Test_helpers.assert_ok k @@ fun k ->
    assert_equal ~ctxt ~printer ~msg:"e" e k.e;
    assert_equal ~ctxt ~printer ~msg:"n" n k.n
  in
  ["Private" >:: test_private; "Public" >:: test_public]
